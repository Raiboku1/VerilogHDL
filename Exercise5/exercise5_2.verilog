module exercise5_2(
input wire clk,
input wire reset,
input wire X,
input wire Y,
output reg F1,
output reg F2
);

reg [1:0] state; // State encoding: 00, 01, 10, 11

always @(posedge clk or posedge reset) begin
if (reset) begin
state <= 2'b00; // Initialize to 00 on reset
F1 <= 0;
F2 <= 0;
end else begin
case(state)
2'b00:
if (X == 0 && Y == 1) begin
F1 <= 0;
F2 <= 1;
state <= 2'b01;
end else if (X == 0 && Y == 0) begin
F1 <= 0;
F2 <= 1;
state <= 2'b11;

end else if (X == 1) begin
// No change in this state
F1 <= F1;
F2 <= F2;
state <= 2'b00;
end
2'b01:
if (X == 0 && Y == 1) begin
F1 <= 0;
F2 <= 0;
state <= 2'b00;
end else if (X == 0 && Y == 0) begin
F1 <= 0;
F2 <= 1;
state <= 2'b10;
end else if (X == 1) begin
F1 <= F1;
F2 <= F2;
state <= 2'b01;
end
2'b10:
if (X == 0 && Y == 1) begin
F1 <= 1;
F2 <= 0;
state <= 2'b11;
end else if (X == 0 && Y == 0) begin
F1 <= 0;
F2 <= 0;

state <= 2'b01;
end else if (X == 1) begin
F1 <= F1;
F2 <= F2;
state <= 2'b10;
end
2'b11:
if (X == 0 && Y == 1) begin
F1 <= 1;
F2 <= 1;
state <= 2'b10;
end else if (X == 0 && Y == 0) begin
F1 <= 0;
F2 <= 0;
state <= 2'b00;
end else if (X == 1) begin
F1 <= F1;
F2 <= F2;
state <= 2'b11;
end
endcase
end
end

endmodule